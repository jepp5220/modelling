class Dispensor -- the actual till. Make it part of atm?
instance variables
    private avaliableFunds: nat;
operations
    public Dispensor: nat ==> Dispensor
    Dispensor(bal) == (
        avaliableFunds := bal;
    );
    public setMoney: nat ==> ()
    setMoney(amount) == (
        avaliableFunds := amount;
    ); 
    public getAvaliable: () ==> nat
    getAvaliable() == (
        return avaliableFunds;
    );
    public addMoney: nat ==> () 
    addMoney(amount) == (
        avaliableFunds := avaliableFunds + amount;
    );
    public removeMoney: nat ==> ()
    removeMoney(amount) == (
        avaliableFunds := avaliableFunds - amount;
    );
end Dispensor

class Atm
types
    public Status = <Online> | <Offline>;
    public Occupancy = <Occupied> | <Free>;
instance variables
    private atmId: nat;
    private location: seq of char;
    private atmStatus: Status;
    private atmOccupancy: Occupancy;
    private startCapital: nat;
    private cashDispensor: Dispensor;
    private associatedBank: Bank;
    private currentCard: [Card]; --optional type
    private currentAcc: [Account];
operations
    public Atm: nat * Bank * seq of char * nat==> Atm
    Atm(id,aBank,loc,money) == (
        atmId := id;
        location := loc;
        atmStatus := <Online>;
        atmOccupancy := <Free>;
        startCapital := money;
        associatedBank:= aBank;
        currentCard := nil;
        currentAcc := nil;
        cashDispensor := new Dispensor(money);
        return self;
    );
    public setStatus: Status ==> ()
    setStatus(newStatus) == (
        atmStatus := newStatus;
    );
    public withdraw: nat1 ==> ()
    withdraw(amount) == (
        if cashDispensor.getAvaliable() < amount then (
            IO`println("Machine cannot fullfill this request.");
            return;
        );
        if (currentAcc.getBalance() >= amount) then( --user can afford, starting withdrawing process
            currentAcc.withdrawMoney(amount); --removes the money from the account. 
            cashDispensor.removeMoney(amount); --simulates money being delivered by the ATM
            return;
        ) 
        else ( --user cannot afford
            IO`println("Balance too low. Try withdrawing a smaller number.")
        );
        --pre machine is occupied, card and acc is not null
    );

    public deposit: nat1 ==> ()
    deposit(amount) == (
        --pre acc/card/occupancy
        --eventuelt check currentAcc balance og sikre at den bliver Ã¦ndret
        dcl initial_balance : nat := currentAcc.getBalance();
        cashDispensor.addMoney(amount);
        currentAcc.addMoney(amount);
        if (initial_balance = currentAcc.getBalance()) then (
            IO`println("An error has occured. The bank has been notified, please hold.")
        ); --not sure how better to implement this

    );
    public getStatus: () ==> Status
    getStatus() == (
        return atmStatus;
    );
    public isFree:() ==> bool
    isFree() ==(
        return atmOccupancy = <Free>; --if free return true
    );

    --Simulates the insertion of card. If the atm is free, it checks if the card is valid
    public insertCard: Card ==> ()
    insertCard(insertedCard) == (
        if (isFree()) then (
            if (associatedBank.validateCard(insertedCard)) then (
                currentCard := insertedCard;
                atmOccupancy:= <Occupied>;
                currentAcc := insertedCard.getAcc();
            )
            else (
                IO`println("Card not recognized.");
            )
        )
        else(
            IO`println("Machine is occupied. Try again later");
        )
    ); 

    --Simulates the ejection of a card, i.e going back to default state of atm.
    public ejectCard: () ==> () 
    ejectCard() ==(
        currentCard := nil;
        currentAcc := nil;
        atmOccupancy := <Free>;
    );
        --'articially' selects an account. Not sure if usefull. 
    public selectAcc: Account ==> ()
    selectAcc(acc) == (
        currentAcc := acc;
    );
end Atm