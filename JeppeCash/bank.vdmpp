class Bank
instance variables
    private bankId: nat;
    private name: seq of char;
    private customers: set of Customer;--map nat to Account := {|->}; --create empty mapping from accounts to bankid
operations
    public Bank: nat * seq of char ==> Bank
    Bank(id,bankName) == (
        bankId := id;
        name := bankName;
        customers := {};
    ); 
    --Adds a new customer to the bank(set).
    public addCustomer: Customer ==> ()
    addCustomer(newCustomer) == (
        --precon: customer already exists
        customers := customers union {newCustomer};
    ); 

    --Removes a customer from the set of customers in the bank. If customer doesnt exist nothing happens. 
    public removeCustomer: Customer ==> ()
    removeCustomer(removableCustomer) == (
        customers := customers \ {removableCustomer};
    );
    --public getAccFromId()

    --Given an account, add ownership to a customer. Need to fix for multiple ownerships
    
    public addAccountToUser: Customer * Account ==> () 
    addAccountToUser(customer,newAcc) ==(
        newAcc.setOwner(customer);
    );

    --getacc from number
    --add account to customer
    --remove account from customer
    --add card to account
    --validate card(in set of cards associated with bank?)
    --validate pin(does pin correspond to card?)
    --
end Bank
