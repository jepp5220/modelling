--This class models a credit card. Expiration dates been abstracted away, and numbers are kept to 4, for brievty, logic would be similar for 16

class Card
instance variables
    private cardNumber: seq of nat;
    inv len(cardNumber) = 4;
    private cardOwner: seq of char;
    private invalidAttempts: nat := 0;
    -- no numbers
    private pinCode: seq of nat; --Should i make it sequence instead?
    inv len(pinCode) = 4;
    private account: Account; --Only 1 account per card ? 
    
operations
    --Default Constructor, provided all details
    public Card: seq of nat  * seq of char * seq of nat * Account==> Card
    Card(num,owner,pin,acc) == (
        cardNumber := num;
        cardOwner := owner;
        pinCode := pin;
        account := acc;
        return self;
    );
    --Second constructor, creating a card not associated with a user yet.
    public Card: seq of nat * seq of nat==> Card
    Card(num,pin) == (
        cardNumber := num;
        pinCode := pin;
        return self;
    );
    --Getters/Setters
    public getCardNumber: () ==> seq of nat
    getCardNumber()==(return cardNumber);
    
    public getAcc:() ==> Account
    getAcc() == (
        return account;
    );

    public setAttempts:(nat) ==> ()
    setAttempts(num) == (
        invalidAttempts:=num;
    );
    public getAttempts:() ==> nat
    getAttempts()==(return invalidAttempts;);

    --Changes the acc associated with a card
    public setAccount: Account ==> () 
    setAccount(acc) ==(
        account := acc;
    );

    public getCardOwner: () ==> seq of char
    getCardOwner()==(return cardOwner);

    public setPinCode: seq of nat ==> ()
    setPinCode(newPin)==(
        pinCode := newPin;
    );
    public getPinCode: () ==> seq of nat 
    getPinCode() == (
        return pinCode;
    );
    public validatePin: seq of nat ==> bool
    validatePin(pinAttempt) == (
        return pinAttempt = pinCode;
    );
end Card
