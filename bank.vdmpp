--Bank class handles customer accusition, validations, blocking of cards etc
--main logic is performed here

class Bank
instance variables
    private bankId: nat;
    private name: seq of char;
    private customers: set of Customer;--map nat to Account := {|->}; --create empty mapping from accounts to bankid
    private atm : Atm; --bank owns atms
    private validCards : set of Card; --cards associated with this bank
    private blockedCards : set of Card; --cards r blocked if pin is wrong 3 times
    private customers1 : map nat to Customer := {|->};
    private accounts1 : map nat to Account := {|->};
    --list of transactions, mapped to atm. 
operations
    public Bank: nat * seq of char ==> Bank
    Bank(id,bankName) == (
        bankId := id;
        name := bankName;
        customers := {};
        validCards := {};
        blockedCards := {};
        atm := new Atm(bankId,self,"Location",5000);
        return self;
    ); 
    public getAtm: () ==> Atm
    getAtm() == (
        return atm;
    );
    --Adds a new customer to the bank(set).
    public addCustomer: Customer ==> ()
    addCustomer(newCustomer) == (
        --precon: customer already exists
        customers := customers union {newCustomer};
    ); 

    --Removes a customer from the set of customers in the bank. If customer doesnt exist nothing happens. 
    public removeCustomer: Customer ==> ()
    removeCustomer(removableCustomer) == (
        customers := customers \ {removableCustomer};
    );

    --Given an account, add ownership to a customer. Need to fix for multiple ownerships
    
    public addAccountToUser: Customer * Account ==> () 
    addAccountToUser(customer,newAcc) ==(
        newAcc.setOwner(customer);
        customer.addAccount(newAcc);
    );

    public removeAccountFromUser: Customer * Account ==> ()
    removeAccountFromUser(cus,acc) == (
        acc.removeOwner();
        cus.removeAccount(acc);
    );

    --opens account and associates with account id
/* 
    public openAccount: () ==> nat
    openAccount() == (
        dcl newAcc: Account := new Account();
        dcl accountID: nat := card(accounts1); --cardinality, size of set
        accounts1 := accounts ++ {accountID |->newAcc};
        return accountID;

    );
*/
    --Adds card to account. 
    public addCardToAccount: Account * Card ==> ()
    addCardToAccount(new_acc,new_card) == (
        new_card.setAccount(new_acc);

    );

    --removeCardFromAccount?

    


    public getAccountsFromCustomer: Customer ==> set of Account
    getAccountsFromCustomer(cus) == (
        return cus.getAccs();
    );
    --if card is valid, returns true, if not returns false
    public validateCard: Card ==> bool
    validateCard(cardUT) == (
        return cardUT in set validCards;  
    );
end Bank
