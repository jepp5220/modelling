--Dispensor models the physical part of the atm that has the money. It has no proper logic, if it's told to provide money, it does.
--the transactions are verified/allowed prior to dispensor calls.
class Dispensor 
instance variables
    private avaliableFunds: nat;
operations
    public Dispensor: nat ==> Dispensor
    Dispensor(bal) == (
        avaliableFunds := bal;
    );
    public setMoney: nat ==> ()
    setMoney(amount) == (
        avaliableFunds := amount;
    ); 
    public getAvaliable: () ==> nat
    getAvaliable() == (
        return avaliableFunds;
    );
    public addMoney: nat ==> () 
    addMoney(amount) == (
        avaliableFunds := avaliableFunds + amount;
    );
    public removeMoney: nat ==> ()
    removeMoney(amount) == (
        avaliableFunds := avaliableFunds - amount;
    );
end Dispensor
--The physical atm, that interacts with the customer. Can only handle 1 customer at a given time. 
class Atm
types
    public Status = <Online> | <Offline>;
    public Occupancy = <Occupied> | <Free> ;
instance variables
    private atmId: nat;
    private location: seq of char;
    private atmStatus: Status;
    private atmOccupancy: Occupancy;
    private startCapital: nat;
    private cashDispensor: Dispensor; --Associated dispensor
    private associatedBank: Bank;
    private currentCard: [Card]; --optional type, as it can be empty/free
    private currentAcc: [Account];
operations
    public Atm: nat * Bank * seq of char * nat==> Atm
    Atm(id,aBank,loc,money) == (
        atmId := id;
        location := loc;
        atmStatus := <Online>;
        atmOccupancy := <Free>;
        startCapital := money;
        associatedBank:= aBank;
        currentCard := nil;
        currentAcc := nil;
        cashDispensor := new Dispensor(money);
        return self;
    );
    --getters/setters
    public getStatus: () ==> Status
    getStatus() == (return atmStatus;);
    public getCurrentAcc:() ==> [Account]
    getCurrentAcc() == (return currentAcc;);
    public getCurrentCard:() ==> [Card]
    getCurrentCard() == (return currentCard;);
    public getStartCapital:() ==> nat
    getStartCapital()==(return startCapital;);
    public getBank:()==>Bank
    getBank() == (return associatedBank;);
    public getAtmId:()==>nat
    getAtmId()==(return atmId;);

    public setStatus: Status ==> ()
    setStatus(newStatus) == (
        atmStatus := newStatus;
    );
    --'articially' selects an account. Not sure if usefull yet. 
    public selectAcc: Account ==> ()
    selectAcc(acc) == (
        currentAcc := acc;
        --Could also return associated card.
    );
    public isFree:() ==> bool
    isFree() ==(
        return atmOccupancy = <Free>; --if free return true
    );

    --'proper' functions
    --If the machine is free/online and a card is inserted/validated, this function
    --allows for the withdrawal of a positive value. 
    public withdraw: nat1 ==> ()
    withdraw(amount) == (
        if currentAcc = nil or currentCard = nil then return;
        if cashDispensor.getAvaliable() < amount then (
            IO`println("Machine cannot fullfill this request.");
            return;
        );
        if (currentAcc.getBalance() >= amount) then( --user can afford, starting withdrawing process
            if (currentAcc.withdrawMoney(amount)) then ( --successfully withdrawn
                cashDispensor.removeMoney(amount); --simulates money being delivered by the ATM
                IO`print("Successfully withdrawn: ");
                IO`println(amount);
                IO`print("Balance is now:");
                IO`println(currentAcc.getBalance());
                )
                else (
                    IO`println("Uknown error withdrawing.");
                );
        return;
        ) 
        else ( --user cannot afford
            IO`println("Balance too low. Try withdrawing a smaller number.")
        );  
    )
    pre atmStatus <> <Offline>;

    public deposit: nat1 ==> ()
    deposit(amount) == (
        dcl initial_balance : nat := currentAcc.getBalance();
        cashDispensor.addMoney(amount);
        currentAcc.addMoney(amount);
        --If the acc didnt properly change balance.
        if (initial_balance = currentAcc.getBalance()) then (
            IO`println("An error has occured. The bank has been notified, please hold.")
        ); --not sure how better to implement this
    )
    pre currentAcc <> nil and atmStatus = <Online>;



    --Simulates the insertion of card. If the atm is free, it checks if the card is valid
    public insertCard: Card * seq of nat==> ()
    insertCard(insertedCard,pinattempt) == (
        if isFree()=false
        then IO`println("Machine is occupied. Try again later")
        else if insertedCard.getAttempts() > 2 then associatedBank.blockCard(insertedCard)
        else if associatedBank.validateCard(insertedCard)
        then IO`println("Card recognized.");
            if insertedCard.validatePin(pinattempt) then (
                currentCard := insertedCard;
                atmOccupancy:= <Occupied>;
                insertedCard.setAttempts(0); --reset wrong attempts 
                currentAcc := insertedCard.getAcc();)
            else 
            IO`println("Wrong pin.");
            insertedCard.setAttempts(insertedCard.getAttempts()+1);
        if associatedBank.validateCard(insertedCard) = false then IO`println("Card not recognized.");
    )
    pre len(pinattempt) = 4 and atmStatus = <Online>;
    
    --Simulates the ejection of a card, i.e going back to default state of atm.
    public ejectCard: () ==> () 
    ejectCard() ==(
        currentCard := nil;
        currentAcc := nil;
        atmOccupancy := <Free>;
    );    
end Atm
